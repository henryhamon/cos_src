<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25" zv="Cache for Windows (x86-32) 2015.2.1 (Build 705U)" ts="2017-01-18 11:15:08">
<Class name="src.maker">
<IncludeCode>%sySystem,%occFile</IncludeCode>
<Super>%RegisteredObject</Super>
<TimeChanged>64301,40161.130218</TimeChanged>
<TimeCreated>64293,50542.169309</TimeCreated>

<Parameter name="Root">
<Default>D:\temp</Default>
</Parameter>

<Parameter name="ImportName">
<Default>src.maker-v0.0.1</Default>
</Parameter>

<Parameter name="SourceFolder">
<Default>src</Default>
</Parameter>

<Property name="Project">
<Type>%String</Type>
</Property>

<Property name="Extension">
<Type>%String</Type>
<InitialExpression>"cls"</InitialExpression>
</Property>

<Property name="Package">
<Type>%String</Type>
<Required>1</Required>
</Property>

<Property name="Namespace">
<Type>%String</Type>
<Required>1</Required>
</Property>

<Method name="Execute">
<ClassMethod>1</ClassMethod>
<FormalSpec>pNamespace:%String="",pPackage:%String,pProject:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try {
		Set:pNamespace="" pNamespace = $Namespace
		Set:pProject="" pProject = pPackage
		Set src = ..%New(pNamespace, pPackage, pProject)
		$$$THROWONERROR(tSC, src.CreateClassFiles())
		
	} Catch tException {
		Set:$$$ISOK(tSC) tSC = tException.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="CreateClassFiles">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try {
		$$$THROWONERROR(tSC, ..Export())
		$$$THROWONERROR(tSC, ..GetPackageClasses(.tRS))
		While tRS.%Next() {
			Set clsname = tRS.%Get("Name") 
			$$$THROWONERROR(tSC, ..FileGenerate(clsname))
		}
	} Catch tException {
		Set:$$$ISOK(tSC) tSC = tException.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="FileName">
<FormalSpec>pClassName:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set clss = $ListFromString(pClassName,".")
	Set $List(clss,*)= $List(clss,*) _ "." _ ..Extension
	
	Set $List(tempPath, *+1) = ..#Root
	Set $List(tempPath, *+1) = ..Project
	Set $List(tempPath, *+1) = ..#SourceFolder
	Set $List(tempPath, *+1) = $ListToString(clss,"\")
	
	Quit $ListToString(tempPath, "\")
]]></Implementation>
</Method>

<Method name="FileGenerate">
<FormalSpec>pClassName:%String</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try {
		$$$THROWONERROR(tSC, ##class(%Compiler.UDL.TextServices).GetTextAsStream(..Namespace, pClassName,.tStream))
		#dim tStream As %Stream.Character

		Set filename = ..FileName(pClassName),
			tempPath = $ListFromString(filename,"\")
		Set $List(tempPath, *)="", tempPath = $Extract($ListToString(tempPath,"\"),0,*-1)

		$$$THROWONERROR(tSC, ..CreateDirectoryRecurse(tempPath))
		
		Set file=##class(%File).%New(filename)
		Do file.Open("WSN"), tStream.Rewind()
		While 'tStream.AtEnd {
   			$$$THROWONERROR(tSC, file.WriteLine(tStream.ReadLine()))
  		}
		Do file.Close()
		
        
	} Catch tException {
		Set:$$$ISOK(tSC) tSC = tException.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="GetPackageClasses">
<FormalSpec>*tRS:%SQL.StatementResult</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK, ns = $Namespace
	Try {
		
		Set sql = "Select Name FROM %Dictionary.ClassDefinition " _ 
			"Where Name %STARTSWITH ?"
				
		Set statement = ##class(%SQL.Statement).%New(), tRS = ""
		Set tSC = statement.%Prepare(sql)
		Set pkg = ..Package
		
		ZNSpace ..Namespace

		Set tRS = statement.%Execute(pkg)
		
	} Catch tException {
		Set:$$$ISOK(tSC) tSC = tException.AsStatus()
	}
	
	ZNSpace ns	
	Quit tSC
]]></Implementation>
</Method>

<Method name="%OnNew">
<FormalSpec>pNamespace:%String="",pPackage:%String="",pProject:%String=""</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
	Set:pNamespace'="" ..Namespace = pNamespace
	Set:pProject'='"" ..Project = pProject
	Set:pPackage'='"" ..Package = pPackage
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="Export">
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK, ns = $Namespace
	Try {
		Set $List(tempPath, *+1) = ..#Root
		Set $List(tempPath, *+1) = ..Project
		Set $List(tempPath, *+1) = ..#ImportName _".xml"
		
		ZNSpace ..Namespace
		$$$THROWONERROR(tSC, $System.OBJ.ExportPackage(..Package, $ListToString(tempPath, "\") ))

	} Catch tException {
		Set:$$$ISOK(tSC) tSC = tException.AsStatus()
	}
	ZNSpace ns
	Quit tSC
]]></Implementation>
</Method>

<Method name="CreateDirectoryRecurse">
<Description>
create directory (recursively)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Path:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try {
	    
	    Set folds = $ListFromString($$$FileNormalizeDirectory(Path),"/")
	    For k=1:1:$ListLength(folds) {
		    Set $List(tempPath, *+1) = $List(folds,k)
		    Set NormalizedPath  = $ListToString(tempPath,"/")

		    if $$$ISWINDOWS {
		        do $ZF(-1, "mkdir "_NormalizedPath)
		    }
		    else {
		        do $ZF(-1, "mkdir -p "_NormalizedPath)
		    }
	    }
	} Catch tException {
		Set:$$$ISOK(tSC) tSC = tException.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>
</Class>
</Export>
